name: build-codeql-db

on:
  workflow_run:
    workflows: ["sync-upstream"]
    types: [completed]
  workflow_dispatch:

env:
  CODEQL_VERSION: "2.23.0"
  BUILD_TYPE: "x64.release"
  OUT_DIR: "out.gn/x64.release"
  DB_NAME: "v8-src-db"
  DEPOT_TOOLS_UPDATE: "0"
  GCLIENT_PY3: "1"
  NINJA_SUMMARIZE_BUILD: "1"
  NINJA_STATUS: "[%f/%t %o/sec %es] "

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-db:
    runs-on: self-hosted
    timeout-minutes: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # (선택) self-hosted에 이미 있으면 생략 가능
      - name: APT deps (optional on self-hosted)
        run: |
          which ninja  || (sudo apt-get update && sudo apt-get install -y ninja-build)
          which rsync  || sudo apt-get install -y rsync
          which unzip  || sudo apt-get install -y unzip
          true

      - name: depot_tools
        run: |
          if [ ! -d "$RUNNER_TEMP/depot_tools" ]; then
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "$RUNNER_TEMP/depot_tools"
          fi
          echo "$RUNNER_TEMP/depot_tools" >> $GITHUB_PATH

      - name: Bootstrap depot_tools Python (CIPD)
        env:
          DEPOT_TOOLS_UPDATE: "1"
        run: |
          update_depot_tools
          gclient --version || true
          vpython3 -V || true

      # ✅ 완전 제거 후 깨끗하게 미러링 + 경로 고정 (/home/user)
      - name: Mirror repository to /home/user/app (clean)
        run: |
          APP="/home/user/app"
          mkdir -p "$APP/v8"
          rsync -a --delete "$GITHUB_WORKSPACE"/ "$APP/v8"/
          echo "APPDIR=$APP" >> $GITHUB_ENV
          echo "V8DIR=$APP/v8" >> $GITHUB_ENV
          echo "DBDIR=$APP/${DB_NAME}" >> $GITHUB_ENV
          ls -la "$APP/v8" | head -n 50

      - name: gclient config / sync / runhooks (unmanaged)
        working-directory: ${{ env.APPDIR }}
        run: |
          gclient config --unmanaged --name v8 https://chromium.googlesource.com/v8/v8
          gclient sync -D --no-history --shallow
          gclient runhooks

      - name: Ensure Clang toolchain (CIPD)
        working-directory: ${{ env.V8DIR }}
        run: python3 tools/clang/scripts/update.py

      # (옵션) ccache — GN args에 cc_wrapper를 안 주므로 체감 이득은 제한적
      - name: Cache ccache (optional)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/*.gn','**/*.gni','DEPS') }}
          restore-keys: ccache-${{ runner.os }}-

      - name: Configure ccache env (optional)
        run: |
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV

      - name: gen (default args; no change)
        working-directory: ${{ env.V8DIR }}
        run: ./tools/dev/v8gen.py x64.release

      - name: Install CodeQL CLI (skip if present)
        run: |
          if ! command -v codeql >/dev/null 2>&1; then
            curl -L -o codeql.zip "https://github.com/github/codeql-cli-binaries/releases/download/v${CODEQL_VERSION}/codeql-linux64.zip"
            unzip -q codeql.zip -d "$RUNNER_TEMP"
            echo "$RUNNER_TEMP/codeql" >> $GITHUB_PATH
          fi

      - name: Verify CodeQL
        run: codeql --version

      # DB를 /home/user/app/<DB_NAME> 에 생성
      - name: Build CodeQL DB (ninja d8)
        working-directory: ${{ env.V8DIR }}
        env:
          CODEQL_RAM: "16384"
          CODEQL_THREADS: "4"
        run: |
          J=$(( $(nproc) / 2 )); [ $J -ge 4 ] || J=4
          L=$J
          codeql database create "${DBDIR}" \
            --language=cpp \
            --source-root="${{ env.V8DIR }}" \
            --command="ninja -C ./${OUT_DIR} d8 -j${J} -l${L}"

      - name: Package DB (zstd)
        run: |
          tar -I 'zstd -T0 -3' -cvf "${DBDIR}.tar.zst" -C "$(dirname "${DBDIR}")" "$(basename "${DBDIR}")"
          ls -lh "${DBDIR}.tar.zst"

      - name: Upload artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DB_NAME }}-${{ github.sha }}
          path: ${{ env.APPDIR }}/${{ env.DB_NAME }}.tar.zst
          if-no-files-found: error
