name: insert-hooks-and-build-d8

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  insert-and-build:
    runs-on: self-hosted
    timeout-minutes: 0

    env:
      # Fixed dirs on the self-hosted runner
      APPDIR: "/home/user/app"
      V8DIR: "/home/user/app/v8"
      OUT_DIR: "out.gn/x64.release"
      # hook insertion inputs
      BQRS_DIR: "/home/user/app/bqrs"
      HOOK_TOOL_DIR: "/home/user/app/hook_tool"
      INSERT_HOOK: "/home/user/app/hook_tool/insert_hook.py"
      REMAP: "/app/v8=/home/user/app"
      CODEQL: "/home/user/codeql-cli/codeql/codeql"  # PATH에 있으면 생략 가능

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional on self-hosted if already present
      - name: Install host deps (optional)
        shell: bash
        run: |
          which rsync  || { sudo apt-get update && sudo apt-get install -y rsync; }
          which ninja  || sudo apt-get install -y ninja-build || true
          which unzip  || sudo apt-get install -y unzip || true

      - name: Install depot_tools (gn, ninja wrappers) to PATH
        shell: bash
        env:
          DEPOT_TOOLS: ${{ runner.temp }}/depot_tools
        run: |
          set -euo pipefail
          if [ ! -d "$DEPOT_TOOLS" ]; then
            git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git "$DEPOT_TOOLS"
          fi
          echo "$DEPOT_TOOLS" >> "$GITHUB_PATH"
          echo "DEPOT_TOOLS_UPDATE=1" >> "$GITHUB_ENV"
          echo "GCLIENT_PY3=1" >> "$GITHUB_ENV"
          echo "NINJA_STATUS=[%f/%t %o/sec %es] " >> "$GITHUB_ENV"
          echo "NINJA_SUMMARIZE_BUILD=1" >> "$GITHUB_ENV"

      - name: Bootstrap depot_tools Python (CIPD sanity)
        shell: bash
        run: |
          set -euo pipefail
          update_depot_tools || true
          gclient --version || true
          vpython3 -V || true

      - name: Ensure V8 tree at $V8DIR
        id: ensure_v8
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "$V8DIR" ]; then
            echo "[ok] Found existing V8 at $V8DIR"
            echo "NEW_V8=0" >> "$GITHUB_ENV"
          else
            echo "[info] $V8DIR not found. Mirroring entire repository → $V8DIR"
            mkdir -p "$V8DIR"
            rsync -a --delete \
              --omit-dir-times --no-owner --no-group --no-perms \
              --exclude '.git/' \
              "$GITHUB_WORKSPACE"/ "$V8DIR"/
            echo "NEW_V8=1" >> "$GITHUB_ENV"
          fi
          echo "[diag] V8DIR contents (top 50):"
          ls -la "$V8DIR" | head -n 50

      # Only when we just created V8DIR from the repo:
      - name: gclient config / sync / runhooks (unmanaged)
        if: env.NEW_V8 == '1'
        shell: bash
        working-directory: ${{ env.APPDIR }}
        run: |
          set -euo pipefail
          gclient config --unmanaged --name v8 https://chromium.googlesource.com/v8/v8
          gclient sync -D --no-history --shallow
          gclient runhooks

      - name: Ensure Clang toolchain (CIPD)
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          python3 tools/clang/scripts/update.py

      # ----- hooks 배치 & BUILD.gn 패치 -----
      - name: Copy hooks into v8/tools
        shell: bash
        run: |
          set -euo pipefail
          src="$HOOK_TOOL_DIR/hooks"
          dst="$V8DIR/tools/hooks"
          test -d "$src" || { echo "::error::hooks dir not found at $src"; exit 1; }
          mkdir -p "$dst"
          rsync -rltD --omit-dir-times --no-owner --no-group --no-perms "$src"/ "$dst"/

      - name: Patch BUILD.gn via script
        shell: bash
        run: |
          set -euo pipefail
          python3 "$HOOK_TOOL_DIR/patch_build_gn.py" "$V8DIR"

      # ----- insert_hook.py 실행 (BQRS 전수 삽입) -----
      - name: Run insert_hook.py for all BQRS
        shell: bash
        working-directory: ${{ env.APPDIR }}
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          cnt=0
          for b in "$BQRS_DIR"/**/*.bqrs; do
            rel="${b#"$BQRS_DIR"/}"
            echo "[hook] $rel"
            if [ -x "$CODEQL" ]; then
              python3 "$INSERT_HOOK" "$b" --codeql "$CODEQL" --root "$APPDIR" --remap "$REMAP"
            else
              # PATH에 codeql가 있다면 --codeql 생략 가능
              python3 "$INSERT_HOOK" "$b" --root "$APPDIR" --remap "$REMAP"
            fi
            cnt=$((cnt+1))
          done
          echo "Total processed: $cnt"
          if [ $cnt -eq 0 ]; then
            echo "::warning::No .bqrs files found under $BQRS_DIR"
          fi

      # ----- gn gen 대신 v8gen.py 사용 -----
      - name: Generate ${{ env.OUT_DIR }} with v8gen.py (v8_enable_src_hooks = true)
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          if [ ! -d "${OUT_DIR}" ]; then
            echo "[info] ${OUT_DIR} not found. Running v8gen.py..."
            python3 ./tools/dev/v8gen.py x64.release -- v8_enable_src_hooks=true
          else
            echo "[ok] ${OUT_DIR} exists. Enforcing v8_enable_src_hooks=true and regenerating if needed."
            if ! grep -q 'v8_enable_src_hooks *= *true' "${OUT_DIR}/args.gn" 2>/dev/null; then
              echo 'v8_enable_src_hooks = true' >> "${OUT_DIR}/args.gn"
              gn gen "${OUT_DIR}" || true
            fi
          fi

      - name: Build d8 with ninja
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          command -v ninja >/dev/null 2>&1 || { echo "::error::ninja not found on PATH"; exit 1; }
          J=$(( $(nproc) / 2 )); [ $J -ge 2 ] || J=2
          echo "Using -j$J -l$J"
          ninja -C "${OUT_DIR}" d8 -j"$J" -l"$J"
