name: insert-hooks-and-build-d8

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  insert-and-build:
    runs-on: self-hosted
    timeout-minutes: 0

    env:
      BQRS_DIR: "/home/user/app/bqrs"
      HOOK_TOOL_DIR: "/home/user/app/hook_tool"
      INSERT_HOOK: "/home/user/app/hook_tool/insert_hook.py"
      V8SRC: "/home/user/app"
      REMAP: "/app/v8=/home/user/app"
      V8BUILD: "/home/user/app"
      CODEQL: "/home/user/codeql-cli/codeql/codeql"
      CODEQL_ALLOW_INSTALLATION_ANYWHERE: "true"
      # (선택) 레포에 v8/이 없으면 이 URL에서 shallow clone
      # 예: https://chromium.googlesource.com/v8/v8.git
      V8_GIT_URL: ""
      # (선택) 브랜치/태그/커밋 지정
      V8_GIT_REF: ""
      # (선택) 레포 내부의 v8 위치를 직접 지정 (예: ${{ github.workspace }}/third_party/v8)
      REPO_V8_DIR: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show context
        shell: bash
        run: |
          whoami
          python3 --version || true
          echo "WORKSPACE=$GITHUB_WORKSPACE"
          echo "BQRS_DIR=$BQRS_DIR"
          echo "HOOK_TOOL_DIR=$HOOK_TOOL_DIR"
          echo "V8SRC=$V8SRC"
          echo "V8BUILD=$V8BUILD"
          echo "CODEQL=$CODEQL"
          echo "V8_GIT_URL=${V8_GIT_URL:-<unset>}"
          echo "V8_GIT_REF=${V8_GIT_REF:-<unset>}"
          echo "REPO_V8_DIR=${REPO_V8_DIR:-<unset>}"

      - name: Sanity check base directories (pre-V8)
        shell: bash
        run: |
          test -d "$BQRS_DIR"       || { echo "::error::No BQRS_DIR at $BQRS_DIR"; exit 1; }
          test -d "$HOOK_TOOL_DIR"  || { echo "::error::No HOOK_TOOL_DIR at $HOOK_TOOL_DIR"; exit 1; }
          test -f "$INSERT_HOOK"    || { echo "::error::insert_hook.py not found at $INSERT_HOOK"; exit 1; }

      - name: Ensure V8 tree at $V8SRC/v8 (use existing / copy / clone)
        shell: bash
        run: |
          set -euo pipefail
          dst_v8="$V8SRC/v8"
          echo "[diag] GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "[diag] Listing workspace root:"
          ls -la "$GITHUB_WORKSPACE" || true

          # 1) 목적지에 이미 있으면 사용
          if [ -d "$dst_v8" ]; then
            echo "[ok] Found existing V8 at $dst_v8"
            exit 0
          fi

          # 2) 레포 안에서 v8 후보 경로 탐색 (REPO_V8_DIR 우선)
          candidates=()
          if [ -n "${REPO_V8_DIR:-}" ]; then
            candidates+=("$REPO_V8_DIR")
          fi
          candidates+=(
            "$GITHUB_WORKSPACE/v8"
            "$GITHUB_WORKSPACE/src/v8"
            "$GITHUB_WORKSPACE/third_party/v8"
            "$GITHUB_WORKSPACE/deps/v8"
            "$GITHUB_WORKSPACE/vendor/v8"
            "$GITHUB_WORKSPACE/external/v8"
            "$HOOK_TOOL_DIR/v8"
          )

          src_found=""
          for c in "${candidates[@]}"; do
            if [ -d "$c" ]; then
              src_found="$c"
              break
            fi
          done

          if [ -n "$src_found" ]; then
            echo "[info] Copying V8 from $src_found → $dst_v8"
            mkdir -p "$dst_v8"
            rsync -rltD --delete --omit-dir-times --no-owner --no-group --no-perms "$src_found"/ "$dst_v8"/
            exit 0
          fi

          # 3) 폴백: V8_GIT_URL이 설정돼 있으면 shallow clone
          if [ -n "${V8_GIT_URL:-}" ]; then
            echo "[info] Cloning V8 from $V8_GIT_URL → $dst_v8"
            mkdir -p "$(dirname "$dst_v8")"
            git clone --depth 1 "$V8_GIT_URL" "$dst_v8"
            if [ -n "${V8_GIT_REF:-}" ]; then
              echo "[info] Checking out $V8_GIT_REF"
              git -C "$dst_v8" fetch --depth 1 origin "$V8_GIT_REF" || true
              git -C "$dst_v8" checkout -q "$V8_GIT_REF"
            fi
            exit 0
          fi

          echo "::error::No V8 tree found.
          Tried candidates:
          - ${candidates[*]}
          And V8_GIT_URL is empty.
          Either:
            (1) ensure one of those paths exists in the repo,
            (2) set REPO_V8_DIR to the actual v8 path in this repo, or
            (3) set V8_GIT_URL to clone."
          exit 1

      - name: Sanity check V8 presence
        shell: bash
        run: |
          test -d "$V8SRC/v8"          || { echo "::error::Expected $V8SRC/v8 to exist"; exit 1; }
          test -f "$V8SRC/v8/BUILD.gn" || { echo "::error::Expected $V8SRC/v8/BUILD.gn"; exit 1; }

      - name: Copy hooks into v8/tools
        shell: bash
        run: |
          set -euo pipefail
          src="$HOOK_TOOL_DIR/hooks"
          dst="$V8SRC/v8/tools/hooks"
          test -d "$src" || { echo "::error::hooks dir not found at $src"; exit 1; }
          mkdir -p "$dst"
          rsync -rltD --omit-dir-times --no-owner --no-group --no-perms "$src"/ "$dst"/

      - name: Patch BUILD.gn via script
        shell: bash
        run: |
          python3 "$HOOK_TOOL_DIR/patch_build_gn.py" "$V8SRC/v8"

      - name: Run insert_hook.py for all BQRS
        shell: bash
        working-directory: /home/user/app
        run: |
          shopt -s globstar nullglob
          cnt=0
          for b in "$BQRS_DIR"/**/*.bqrs; do
            rel="${b#"$BQRS_DIR"/}"
            echo "[hook] $rel"
            python3 "$INSERT_HOOK" "$b" --codeql "$CODEQL" --root "$V8SRC" --remap "$REMAP"
            cnt=$((cnt+1))
          done
          echo "Total processed: $cnt"
          if [ $cnt -eq 0 ]; then
            echo "::warning::No .bqrs files found under $BQRS_DIR"
          fi

      - name: Generate out/Debug if missing
        shell: bash
        working-directory: /home/user/app/v8
        run: |
          set -euo pipefail
          if [ ! -d "out/Debug" ]; then
            echo "[info] out/Debug not found. Running gn gen..."
            gn gen out/Debug --args='v8_enable_src_hooks=true'
          else
            echo "[ok] out/Debug exists. Skipping gn gen."
          fi

      - name: Build d8 with ninja (out/Debug)
        shell: bash
        working-directory: /home/user/app/v8
        run: |
          J=$(( $(nproc) / 2 )); [ $J -ge 2 ] || J=2
          echo "Using -j$J -l$J"
          ninja -C out/Debug d8 -j"$J" -l"$J"
