name: insert-hooks-and-build-d8

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  insert-and-build:
    runs-on: self-hosted
    timeout-minutes: 0

    env:
      # Fixed dirs on the self-hosted runner
      APPDIR: "/home/user/app"
      V8DIR: "/home/user/app/v8"
      OUT_DIR: "out.gn/x64.release"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional on self-hosted if already present
      - name: Install host deps (optional)
        shell: bash
        run: |
          which rsync  || { sudo apt-get update && sudo apt-get install -y rsync; }
          which ninja  || sudo apt-get install -y ninja-build || true
          which unzip  || sudo apt-get install -y unzip || true

      - name: Install depot_tools (gn, ninja wrappers) to PATH
        shell: bash
        env:
          DEPOT_TOOLS: ${{ runner.temp }}/depot_tools
        run: |
          set -euo pipefail
          if [ ! -d "$DEPOT_TOOLS" ]; then
            git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git "$DEPOT_TOOLS"
          fi
          echo "$DEPOT_TOOLS" >> "$GITHUB_PATH"
          # Make depot_tools use pinned toolchains
          echo "DEPOT_TOOLS_UPDATE=1" >> "$GITHUB_ENV"
          echo "GCLIENT_PY3=1" >> "$GITHUB_ENV"
          echo "NINJA_STATUS=[%f/%t %o/sec %es] " >> "$GITHUB_ENV"
          echo "NINJA_SUMMARIZE_BUILD=1" >> "$GITHUB_ENV"

      - name: Bootstrap depot_tools Python (CIPD sanity)
        shell: bash
        run: |
          set -euo pipefail
          update_depot_tools || true
          gclient --version || true
          vpython3 -V || true

      - name: Ensure V8 tree at $V8DIR
        id: ensure_v8
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "$V8DIR" ]; then
            echo "[ok] Found existing V8 at $V8DIR"
            echo "NEW_V8=0" >> "$GITHUB_ENV"
          else
            echo "[info] $V8DIR not found. Mirroring entire repository â†’ $V8DIR"
            mkdir -p "$V8DIR"
            rsync -a --delete \
              --omit-dir-times --no-owner --no-group --no-perms \
              --exclude '.git/' \
              "$GITHUB_WORKSPACE"/ "$V8DIR"/
            echo "NEW_V8=1" >> "$GITHUB_ENV"
          fi
          echo "[diag] V8DIR contents (top 50):"
          ls -la "$V8DIR" | head -n 50

      # Only when we just created V8DIR from the repo:
      - name: gclient config / sync / runhooks (unmanaged)
        if: env.NEW_V8 == '1'
        shell: bash
        working-directory: ${{ env.APPDIR }}
        run: |
          set -euo pipefail
          # Configure a minimal client around $APPDIR/v8 WITHOUT converting it into a managed checkout
          gclient config --unmanaged --name v8 https://chromium.googlesource.com/v8/v8
          # This brings in third_party dependencies required by GN build (clang toolchain, etc.)
          gclient sync -D --no-history --shallow
          gclient runhooks

      - name: Ensure Clang toolchain (CIPD)
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          # Ensures third_party/llvm-build etc. are fetched
          python3 tools/clang/scripts/update.py

      - name: Generate ${{ env.OUT_DIR }} with v8gen.py (v8_enable_src_hooks = true)
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          if [ ! -d "${OUT_DIR}" ]; then
            echo "[info] ${OUT_DIR} not found. Running v8gen.py..."
            # v8gen.py internally invokes gn; depot_tools must be in PATH
            python3 ./tools/dev/v8gen.py x64.release -- v8_enable_src_hooks=true
          else
            echo "[ok] ${OUT_DIR} exists. Enforcing v8_enable_src_hooks=true and regenerating if needed."
            if ! grep -q 'v8_enable_src_hooks *= *true' "${OUT_DIR}/args.gn" 2>/dev/null; then
              echo 'v8_enable_src_hooks = true' >> "${OUT_DIR}/args.gn"
              # Re-run gn to apply updated args
              gn gen "${OUT_DIR}" || true
            fi
          fi

      # If you also want to build d8 right here, keep this step; otherwise remove it.
      - name: Build d8 with ninja
        shell: bash
        working-directory: ${{ env.V8DIR }}
        run: |
          set -euo pipefail
          command -v ninja >/dev/null 2>&1 || { echo "::error::ninja not found on PATH"; exit 1; }
          J=$(( $(nproc) / 2 )); [ $J -ge 2 ] || J=2
          echo "Using -j$J -l$J"
          ninja -C "${OUT_DIR}" d8 -j"$J" -l"$J"
