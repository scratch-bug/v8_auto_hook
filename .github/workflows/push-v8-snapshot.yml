name: push-v8-snapshot

on:
  workflow_run:
    workflows: ["insert-hooks-on-build-d8"]
    types: [completed]
  workflow_dispatch:
    inputs:
      branch_date:
        description: '브랜치 이름(YYYY-MM-DD). 비우면 UTC 오늘 날짜 사용'
        required: false
      include_build:
        description: 'out.gn 등 빌드 산출물 포함 여부 (true/false)'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  push-v8:
    # insert-hooks-and-build-d8 가 성공했을 때만 자동 실행
    if: |
      github.event_name == 'workflow_run'
      && github.event.workflow_run.conclusion == 'success'
      || github.event_name == 'workflow_dispatch'
    runs-on: self-hosted
    timeout-minutes: 30
    env:
      SRC_DIR: "/home/user/app/v8"
      TARGET_REPO: "scratch-bug/v8_hook"

    steps:
      - name: Check required secret (PAT_TOKEN)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
            echo "::error::Missing secrets.PAT_TOKEN (PAT with repo write access)"
            exit 1
          fi

      - name: Validate source directory
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d "$SRC_DIR" ]; then
            echo "::error::Source dir not found: $SRC_DIR"
            exit 1
          fi
          echo "[diag] top of $SRC_DIR:"
          ls -la "$SRC_DIR" | head -n 50

      - name: Compute branch name
        id: branch
        shell: bash
        run: |
          set -euo pipefail
          # workflow_dispatch 입력이 있으면 사용, 없으면 UTC 오늘 날짜
          if [ -n "${{ github.event.inputs.branch_date }}" ]; then
            BRANCH="${{ github.event.inputs.branch_date }}"
          else
            BRANCH="$(date -u +%F)"
          fi

          if printf '%s' "$BRANCH" | grep -Eq '[[:space:]]|/|\\|\.\.|~|\^|:|\?|\*|\['; then
            echo "::error::Invalid branch name: $BRANCH"
            exit 1
          fi
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "[info] branch = $BRANCH"

      - name: Stage snapshot (rsync from $SRC_DIR)
        id: stage
        shell: bash
        env:
          # workflow_dispatch일 때만 값이 들어오고, 자동 실행 때는 기본 false
          INCLUDE_BUILD: ${{ github.event.inputs.include_build }}
        run: |
          set -euo pipefail
          WORKDIR="$(mktemp -d)"
          echo "workdir=$WORKDIR" >> "$GITHUB_OUTPUT"

          EXCLUDES=(--exclude '.git/' --exclude '.cipd/*' --exclude '.cache/' --exclude '.tmp/')

          INC="${INCLUDE_BUILD:-false}"
          if [ "$INC" != "true" ]; then
            EXCLUDES+=(--exclude 'out.gn/' --exclude 'out/' --exclude '**/*.orig')
          fi

          rsync -a --delete \
            --omit-dir-times --no-owner --no-group --no-perms \
            "${EXCLUDES[@]}" \
            "$SRC_DIR"/ "$WORKDIR"/

          du -sh "$WORKDIR" || true
          echo "[ok] staged snapshot"

      - name: Push to target repository (date-named branch)
        shell: bash
        env:
          WORKDIR: ${{ steps.stage.outputs.workdir }}
          BRANCH: ${{ steps.branch.outputs.branch }}
        run: |
          set -euo pipefail
          cd "$WORKDIR"

          # self-hosted 환경 안전 경고 회피
          git config --global --add safe.directory "$WORKDIR"

          git init
          git config user.name  "gh-actions"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          git commit -m "v8 snapshot $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          # 원격 추가 (토큰 포함)
          git remote add origin "https://${{ secrets.PAT_TOKEN }}@github.com/${{ env.TARGET_REPO }}.git"

          # 날짜 브랜치를 force-push 하고 싶지 않다면 -f 제거
          git push -u origin "HEAD:refs/heads/${BRANCH}"

          echo "[ok] pushed ${{ env.TARGET_REPO }}@${BRANCH}"
